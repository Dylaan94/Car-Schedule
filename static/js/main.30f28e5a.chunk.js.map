{"version":3,"sources":["components/styles/MainStyles.js","components/LocalStorage.js","components/styles/HeaderStyles.js","components/Header.js","components/styles/SidebarStyles.js","components/Sidebar.js","components/SaveSchedule.js","components/styles/AppStyles.js","components/Main.js","components/styles/FooterStyles.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["MainStyles","GridContainer","styled","div","GridWrapper","CarWrapper","ButtonsWrapper","dataArray","DaysOfWeek","1","2","3","4","5","6","Names","7","8","9","addToDataArray","node","widgetData","data","startDate","document","getElementById","innerHTML","endDate","day","y","name","x","type","id","h","w","String","console","log","push","ToStorage","preparedDataArray","dataArray_serialised","JSON","stringify","window","localStorage","setItem","Header","DatePicker","HeaderStyles","Dates","props","useState","dateRange","setDateRange","selectsRange","onChange","update","onCalendarClose","date","dateArray","join","split","length","startDateString","handleStartDate","endDateString","handleEndDate","placeholderText","withPortal","className","classname","SidebarStyles","Sidebar","SidebarTitle","SidebarHeader","SidebarHistory","state","saved","updateScheduleHistory","bind","values","map","this","Component","SaveSchedule","onTrigger","e","prepareForStorage","savedData","parse","getItem","setState","handleInput","onClick","AppStyles","MainContainer","Container","Main","Footer","count","info","items","choice","handleSaveSchedule","handleClear","childData","grid","removeWidget","initGrid","GridStack","init","column","float","cellHeight","minRow","maxRow","acceptWidgets","class","i","content","noResize","locked","noMove","addWidget","carGrid","addGrid","carNode","querySelectorAll","on","event","element","nodeName","gridstackNode","currentWidgets","getGridItems","forEach","widget","previousWidget","newWidget","splice","removeFromDataArray","initCarGrid","FooterStyles","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.30f28e5a.chunk.js","sourcesContent":["import { useFlexLayout } from \"react-table\";\nimport styled from \"styled-components\";\n\nconst GridContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  margin-left: 1em;\n`;\n\nconst GridWrapper = styled.div`\n  width: 70vw;\n  background: white;\n  border-radius: 5px;\n  box-shadow: 2px 2px 3px rgb(206, 212, 218);\n`;\n\nconst CarWrapper = styled.div`\n  width: 10vw;\n  background: white;\n  border-radius: 10px;\n  margin-left: 0.3em;\n  margin-left: 1em;\n  box-shadow: 2px 2px 3px rgb(206, 212, 218);\n`;\n\nconst ButtonsWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 1.5em;\n  gap: 2em;\n  button {\n    font-family: \"Ubuntu\", sans-serif;\n    font-size: 1em;\n    padding: 1em;\n    border-radius: 4px;\n    border: none;\n    box-shadow: 2px 2px 3px rgb(206, 212, 218);\n  }\n  button:hover {\n    cursor: pointer;\n  }\n\n  .saveScheduleButton {\n    background: #fca311;\n  }\n\n  .clearGridButton {\n    background: #f94144;\n  }\n`;\n\nconst MainStyles = {\n  GridContainer: GridContainer,\n  GridWrapper: GridWrapper,\n  CarWrapper: CarWrapper,\n  ButtonsWrapper: ButtonsWrapper,\n};\n\nexport default MainStyles;\n","// Organise and maintain data that will be moved into state\n\nconst dataArray = [];\nconst preparedDataArray = [];\nlet dataArrayFromStorage;\n\nconst DaysOfWeek = {\n  1: \"Monday\",\n  2: \"Tuesday\",\n  3: \"Wednesday\",\n  4: \"Thursday\",\n  5: \"Friday\",\n  6: \"Last Friday\",\n};\n\nconst Names = {\n  1: \"Dylan\",\n  2: \"Erik\",\n  3: \"Han\",\n  4: \"Michael\",\n  5: \"Oscar\",\n  6: \"Jess\",\n  7: \"Carina\",\n  8: \"Marie\",\n  9: \"Imelda\",\n};\n\n//takes in data from grid on drop in Main.js\nlet addToDataArray = (node) => {\n  // set data based on DaysOfWeek and Names object\n  let widgetData = node;\n\n  let data = {\n    startDate: document.getElementById(\"startDate\").innerHTML,\n    endDate: document.getElementById(\"endDate\").innerHTML,\n    day: DaysOfWeek[widgetData.y],\n    name: Names[widgetData.x],\n    type: widgetData.id,\n    h: widgetData.h,\n    w: widgetData.w,\n    x: widgetData.x,\n    y: widgetData.y,\n    id: String(widgetData.x) + String(widgetData.y),\n    //  index: dataArray.length,\n  };\n\n  console.log(data);\n  // push data to array to be stored.\n  dataArray.push(data);\n  console.log(dataArray);\n};\n\n// deletes widget from dataArray whilst it is being moved\nlet removeFromDataArray = (node) => {\n  console.log(\"removing\");\n  let widgetData = node;\n  let id = String(widgetData.x) + String(widgetData.y);\n  // checks if id already exists (that space has already been populated)\n  for (let i = 0; i < dataArray.length; i++) {\n    if (dataArray[i].id == id) {\n      // removes from array based on index\n      //  let index = dataArray[i].index;\n      dataArray.splice(i, 1);\n      console.log(dataArray);\n    }\n  }\n};\n\nlet prepareForStorage = () => {\n  let preparedDataArray = [dataArray]\n  console.log(preparedDataArray)\n  ToStorage(preparedDataArray);\n}\n\nlet ToStorage = (preparedDataArray) => {\n  // uses JSON to store data as a string in local storage\n  let dataArray_serialised = JSON.stringify(preparedDataArray);\n  window.localStorage.setItem(\"savedSchedule\", dataArray_serialised);\n  console.log(\"Saved to storage!\");\n};\n\nconst FromStorage = () => {\n  // parse from string\n  let dataArray_deserialised = JSON.parse(\n    window.localStorage.getItem(\"savedSchedule\")\n  );\n  let dataArrayFromStorage = dataArray_deserialised;\n  console.log(dataArrayFromStorage);\n};\n\nexport {\n  prepareForStorage,\n  ToStorage,\n  FromStorage,\n  addToDataArray,\n  removeFromDataArray,\n  dataArrayFromStorage,\n};\n","import styled from \"styled-components\";\nimport Main from \"../Main\";\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 10vh;\n  color: #161a1d;\n  background: white;\n  font-size: 2em;\n  font-weight: 900;\n  border-bottom: 2px solid rgb(241, 242, 249);\n`;\n\nconst DatePicker = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst Dates = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst HeaderStyles = {\n  Header: Header,\n  Dates: Dates,\n  DatePicker: DatePicker,\n};\n\nexport default HeaderStyles;\n","import React, { useState } from \"react\";\nimport HeaderStyles from \"./styles/HeaderStyles\";\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst Header = (props) => {\n  const [dateRange, setDateRange] = useState([null, null]);\n  const [startDate, endDate] = dateRange;\n\n  let handleStartDate = (date) => {\n    let dateArray = [date].join(\" \").split(\" \");\n    dateArray.length = 4; // mutates array to remove time stamp\n    // dynamically update DOM\n    let startDateString = dateArray.join(\" \");\n    document.getElementById(\"startDate\").innerHTML = startDateString;\n  };\n\n  let handleEndDate = (date) => {\n    let dateArray = [date].join(\" \").split(\" \");\n    dateArray.length = 4; // mutates array to remove time stamp\n    // dynamically update DOM\n    let endDateString = dateArray.join(\" \");\n    document.getElementById(\"endDate\").innerHTML = endDateString;\n  };\n\n  return (\n    <div>\n      <HeaderStyles.Header>Onomichi City BOE Car Schedule</HeaderStyles.Header>\n      <HeaderStyles.DatePicker>\n        <DatePicker\n          selectsRange={true}\n          startDate={startDate}\n          endDate={endDate}\n          onChange={(update) => {\n            setDateRange(update);\n          }}\n          onCalendarClose={() => {\n            handleStartDate(startDate);\n            handleEndDate(endDate);\n          }}\n          placeholderText=\"Choose Dates\"\n          withPortal\n        />\n      </HeaderStyles.DatePicker>\n      <HeaderStyles.Dates>\n        <h2 className=\"date\" id=\"startDate\">\n          Mon Jul 26 2021 {/*placeholder date*/}\n        </h2>\n        <h2 classname=\"date\" id=\"endDate\">\n          Fri Jul 30 2021 {/*placeholder date*/}\n        </h2>\n      </HeaderStyles.Dates>\n    </div>\n  );\n};\n\nexport default Header;\n","import styled from \"styled-components\";\n\nconst Sidebar = styled.div`\ncolor: white`;\n\nconst SidebarTitle = styled.div``\n\nconst SidebarHeader = styled.div``\n\nconst SidebarHistory = styled.div``\n\nconst SidebarStyles = {\n  Sidebar: Sidebar,\n  SidebarTitle: SidebarTitle,\n  SidebarHeader: SidebarHeader,\n  SidebarHistory: SidebarHistory\n};\n\n\nexport default SidebarStyles;\n","import React, { Component } from \"react\";\nimport SidebarStyles from \"./styles/SidebarStyles\";\nimport { FromStorage } from \"./LocalStorage\";\n\nclass Sidebar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      saved: [],\n    };\n\n    this.updateScheduleHistory = this.updateScheduleHistory.bind(this);\n  }\n\n  updateScheduleHistory(values) {\n    /* maps data and displays on sidebar when the component is updated\n  this happens when the save schedule component is clicked */\n    \n    // need to fix this so that the data is loaded out of the right array\n    return (\n      <div>\n        {values.map((data) => (\n          <div className=\"savedDataList\"> {data[0].startDate} </div>\n        ))}\n      </div>\n    );\n  }\n\n  render() {\n    const { values } = this.props;\n    return (\n      <SidebarStyles.Sidebar>\n        <SidebarStyles.SidebarHistory>\n          {console.log(values)}\n          <h2> Schedule History </h2>\n          <div className=\"scheduleHistory\">\n            {this.updateScheduleHistory(values)}\n          </div>\n        </SidebarStyles.SidebarHistory>\n      </SidebarStyles.Sidebar>\n    );\n  }\n}\n\nexport default Sidebar;\n","import React, { Component } from \"react\";\nimport { ToStorage, prepareForStorage } from \"./LocalStorage\";\n\nclass SaveSchedule extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      saved: [],\n    };\n    this.onTrigger = this.onTrigger.bind(this);\n  }\n\n  onTrigger(e) {\n    //send data to storage, will be prepared and then sent\n    prepareForStorage();\n    // ToStorage();\n\n    //retrieve data and set in state\n    let savedData = JSON.parse(window.localStorage.getItem(\"savedSchedule\"));\n    console.log(savedData);\n\n    // check if state exists\n    // if it does not\n\n    this.setState(\n      {\n        saved: savedData,\n      },\n      () => {\n        console.log(this.state); // setState is async so console log returned as callback\n        this.props.handleInput(this.state.saved); // send saved data to handleInput in main\n      }\n    );\n\n    //need some sort of functionality that updates the array so that saved data updates\n\n    //   this.setState(previousState => ({\n    //       saved: [...previousState.saved, savedData]\n    //   },\n    //       ()=> {\n    //           console.log(this.state);\n    //           this.props.handleInput(this.state.saved)\n    //   }))\n\n    // if state already exists, add to state\n  }\n\n  render() {\n    return (\n      <div>\n        <button className=\"saveScheduleButton\" onClick={this.onTrigger}>\n          Save Schedule\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default SaveSchedule;\n","import styled from \"styled-components\";\n\nconst MainContainer = styled.div`\ndisplay: flex;\n`\n\n\nconst Sidebar = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 15vw;\n  height: 95vh;\n  background: #08184e;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 85vw;\n`;\n\nconst Header = styled.div`\n\nwidth: 85vw;`\n\nconst Main = styled.div`\ndisplay: flex;\nflex-direction: column;\n`\n\nconst Footer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 5vh;\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  right: 0;\n`;\n\nconst AppStyles = {\n  MainContainer: MainContainer,\n    Sidebar: Sidebar,\n    Container: Container,\n    Header: Header,\n    Main: Main,\n    Footer: Footer,\n}\n\nexport default AppStyles","import React, { Component } from \"react\";\nimport { GridStack } from \"gridstack\";\nimport \"gridstack/dist/gridstack.css\";\nimport \"gridstack/dist/h5/gridstack-dd-native\";\nimport \"gridstack/dist/gridstack-extra.css\";\n\nimport $ from \"jquery\";\n\nimport MainStyles from \"./styles/MainStyles\";\n// import { addToDataArray, removeFromDataArray } from \"./Logic\";\nimport { addToDataArray,removeFromDataArray } from \"./LocalStorage\";\nimport Footer from \"./Footer\";\nimport Header from \"./Header\";\nimport Sidebar from \"./Sidebar\";\nimport SaveSchedule from \"./SaveSchedule\";\n\nimport AppStyles from \"./styles/AppStyles\";\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      info: \"\",\n      items: [\n        { x: 0, y: 0, h: 1, w: 1, name: \"Day\" },\n        { x: 1, y: 0, h: 1, w: 1, name: \"Dylan\" },\n        { x: 2, y: 0, h: 1, w: 1, name: \"Erik\" },\n        { x: 3, y: 0, h: 1, w: 1, name: \"Han\" },\n        { x: 4, y: 0, h: 1, w: 1, name: \"Michael\" },\n        { x: 5, y: 0, h: 1, w: 1, name: \"Oscar\" },\n        { x: 6, y: 0, h: 1, w: 1, name: \"Jess\" },\n        { x: 7, y: 0, h: 1, w: 1, name: \"Carina\" },\n        { x: 8, y: 0, h: 1, w: 1, name: \"Marie\" },\n        { x: 9, y: 0, h: 1, w: 1, name: \"Imelda\" },\n        { x: 0, y: 1, h: 1, w: 1, name: \"Monday\" },\n        { x: 0, y: 2, h: 1, w: 1, name: \"Tuesday\" },\n        { x: 0, y: 3, h: 1, w: 1, name: \"Wednesday\" },\n        { x: 0, y: 4, h: 1, w: 1, name: \"Thursday\" },\n        { x: 0, y: 5, h: 1, w: 1, name: \"Friday\" },\n        { x: 0, y: 6, h: 1, w: 1, name: \"Last Friday\" },\n      ],\n      choice: [\n        { x: 0, y: 0, h: 1, w: 1, name: \"BOE\" },\n        { x: 1, y: 0, h: 1, w: 1, name: \"City\" },\n        { x: 2, y: 0, h: 1, w: 1, name: \"Special\" },\n      ],\n      saved: [],\n    };\n    this.handleSaveSchedule = this.handleSaveSchedule.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n  }\n\n  // child data comes from the child sidebar component which updates the state\n  // the state can then be used to set widgets based on data from local storage with initSavedGrid\n  handleSaveSchedule(childData) {\n    this.setState(\n      {\n        saved: childData,\n      },\n      () => {\n        console.log(this.state); // setState is async, use callback for console.log\n        //this.initSavedGrid();\n      }\n    );\n  }\n\n  handleClear() {\n    console.log(\"clear clicked\");\n    this.grid.removeWidget();\n    this.initGrid();\n  }\n\n  initGrid() {\n    this.grid = GridStack.init({\n      column: 10,\n      float: true,\n      cellHeight: \"80px\",\n      minRow: 7,\n      maxRow: 7,\n      acceptWidgets: true,\n      class: \"mainGrid\",\n    });\n\n    // renders initial items in state and sets id as name\n    const node = this.state.items; // array\n\n    // sets placement based on data in state\n    for (let i = 0; i < node.length; i++) {\n      node.id = node.content = String(this.state.items[i].name);\n      node.x = node[i].x;\n      node.y = node[i].y;\n      node.h = node[i].h;\n      node.w = node[i].w;\n\n      node.noResize = true;\n      node.locked = true;\n      node.noMove = true;\n      this.grid.addWidget(node);\n    }\n  }\n\n  initCarGrid() {\n    // options for Car Grid\n    const options = {\n      column: 1,\n      float: false,\n      cellHeight: \"80px\",\n      minRow: 3,\n      maxRow: 3,\n      acceptWidgets: false,\n    };\n\n    // init carGrid, attach to DOM and pass in options\n    this.carGrid = GridStack.addGrid(\n      document.getElementById(\"carWrapper\"),\n      options\n    );\n\n    // sets placement data based on data in state\n    // this is causing each carNode object to have data from state in\n    let carNode = this.state.choice; // car choices array\n\n    for (let i = 0; i < carNode.length; i++) {\n      carNode.id = carNode.content = carNode[i].name;\n      carNode.x = carNode[i].x;\n      carNode.y = carNode[i].y;\n      carNode.h = carNode[i].h;\n      carNode.w = carNode[i].w;\n\n      carNode.noResize = true;\n\n      this.carGrid.addWidget(carNode);\n    }\n\n    console.log(carNode);\n    console.log(document.querySelectorAll(\"div[gs-id='Michael']\"));\n\n    // init after drag stop\n    // sets nodeName to be checked and refilled if not there.\n    this.carGrid.on(\"dragstart\", (event, element) => {\n      const node = element.gridstackNode;\n      let nodeName = node.content;\n      console.log(\"dragstart\");\n\n      // set reset based off name.\n      if (nodeName === \"Special\") {\n        console.log(\"special being dragged\");\n        carNode.id = carNode.content = \"Special\";\n        carNode.x = 2;\n        carNode.y = 0;\n        carNode.h = 1;\n        carNode.w = 1;\n        carNode.noResize = true;\n        this.carGrid.addWidget(carNode);\n      } else if (nodeName === \"BOE\") {\n        console.log(\"BOE being dragged\");\n        carNode.id = carNode.content = \"BOE\";\n\n        carNode.x = 0;\n        carNode.y = 0;\n        carNode.h = 1;\n        carNode.w = 1;\n        carNode.noResize = true;\n        this.carGrid.addWidget(carNode);\n      } else if (nodeName === \"City\") {\n        console.log(\"City being dragged\");\n        carNode.id = carNode.content = \"City\";\n\n        carNode.x = 1;\n        carNode.y = 0;\n        carNode.h = 1;\n        carNode.w = 1;\n        carNode.noResize = true;\n        this.carGrid.addWidget(carNode);\n      }\n\n      // on dragstart sets all current widgets on grid to locked\n      // stops widgets from moving when dragging in\n      let currentWidgets = this.grid.getGridItems();\n      console.log(currentWidgets);\n      currentWidgets.forEach((widget) => {\n        widget.gridstackNode.locked = true;\n      });\n    });\n\n    this.grid.on(\"dropped\", (event, previousWidget, newWidget) => {\n      console.log(newWidget);\n      addToDataArray(newWidget);\n    });\n\n    this.grid.on(\"dragstart\", (event, element) => {\n      let currentWidgets = this.grid.getGridItems();\n      let node = element.gridstackNode;\n      // on dragstart sets widgets on board to locked\n      currentWidgets.forEach((widget) => {\n        widget.gridstackNode.locked = true;\n      });\n      // unlocks current node\n      node.locked = false;\n      removeFromDataArray(node);\n    });\n\n    this.grid.on(\"dragstop\", (event, element) => {\n      const node = element.gridstackNode;\n      addToDataArray(node);\n    });\n  }\n\n  initSavedGrid() {\n    const node = this.state.saved;\n\n    for (let i = 0; i < node.length; i++) {\n      node.id = node.content = String(this.state.saved[i].name);\n      node.x = node[i].x;\n      node.y = node[i].y;\n      node.h = node[i].h;\n      node.w = node[i].w;\n\n      node.noResize = true;\n      node.locked = true;\n      node.noMove = true;\n      this.grid.addWidget(node);\n    }\n  }\n\n  componentDidMount() {\n    // once the component mounts it initialises the gridstack\n    this.initGrid();\n    this.initCarGrid();\n  }\n\n  componentDidUpdate() {\n    // this.grid.makeWidget()\n  }\n\n  render() {\n    return (\n      <div id=\"thisDiv\">\n        <AppStyles.MainContainer>\n          <AppStyles.Sidebar>\n            <Sidebar\n              values={this.state.saved}\n            />\n          </AppStyles.Sidebar>\n          <AppStyles.Container>\n            <AppStyles.Header>\n              <Header />\n            </AppStyles.Header>\n            <AppStyles.Main>\n              {this.state.info}\n              <MainStyles.GridContainer>\n                <MainStyles.GridWrapper id=\"gridWrapper\">\n                  <section className=\"grid-stack grid-stack-N\"></section>\n                </MainStyles.GridWrapper>\n                <MainStyles.CarWrapper id=\"carWrapper\"></MainStyles.CarWrapper>\n              </MainStyles.GridContainer>\n              <MainStyles.ButtonsWrapper>\n                <SaveSchedule\n                  values={this.state.saved}\n                  handleInput={this.handleSaveSchedule}\n                ></SaveSchedule>\n\n                {/* <button className=\"saveScheduleButton\" onClick={ToStorage}>\n                  Save schedule\n                </button> */}\n                <button className=\"clearGridButton\" onClick={this.handleClear}>\n                  Clear grid\n                </button>\n              </MainStyles.ButtonsWrapper>\n            </AppStyles.Main>\n          </AppStyles.Container>\n          <AppStyles.Footer>\n            <Footer />\n          </AppStyles.Footer>\n        </AppStyles.MainContainer>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import styled from \"styled-components\";\nimport Main from \"../Main\";\n\nconst Footer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 5vh;\n  color: #161a1d;\n  background: #d3d3d3;\n  font-size: 1.5em;\n  font-weight: 900;\n`;\n\nconst FooterStyles = {\n  Footer: Footer,\n};\n\nexport default FooterStyles;\n","import React from \"react\";\nimport FooterStyles from \"./styles/FooterStyles\";\n\nconst Footer = (props) => {\n  return (\n    <div>\n      <FooterStyles.Footer>this is a footer!</FooterStyles.Footer>\n    </div>\n  );\n};\n\nexport default Footer;\n","import \"./App.css\";\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Sidebar from \"./components/Sidebar\";\n\nimport AppStyles from \"./components/styles/AppStyles\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}